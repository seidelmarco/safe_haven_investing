import bs4 as bs
import pickle
import requests

import time
import datetime as dt
import os  # os is to check for, and create, directories
import warnings

import pandas as pd
import pandas_datareader.data as pdr
import yfinance as yf

import matplotlib.pyplot as plt
from matplotlib import style
import numpy as np

from tqdm import tqdm

yf.pdr_override()
style.use('ggplot')


def visualize_data():
    df = pd.read_csv('sp500_joined_closes.csv')
    print(df)

    #df['AAPL'].plot()
    #plt.show()

    # Building a correlation Dataframe with the corr()-function:
    # Todo: FutureWarning: The default value of numeric_only in DataFrame.corr is deprecated. In a future version,
    #  it will default to False. Select only valid columns or specify the value of numeric_only to silence this warning.
    # the error was raised by the Date-column of the original df (couldn't get converted to float), maybe skip it in
    # case of default of numeric_only in corr() will be deprecated

    '''
    The correlation coefficient (ρ) is a measure that determines the degree to which the movement of two different 
    variables is associated (in this function: pricemovement). The most common correlation coefficient, generated by 
    Pearson product-moment correlation, is used to measure the linear relationship between two variables. However, 
    in a non-linear relationship, this correlation coefficient may not always be a suitable measure of dependence. 
    
    Calculating corr p:
    - p = cov(X, Y)/(stdev X * stdev Y)
    
    '''

    df_corr = df.corr(numeric_only=True)
    df_corr.to_csv('sp500corr.csv')
    print(df_corr)

    # plotting a heatmap
    # actual data to graph:
    data1 = df_corr.values
    # print(data1)
    '''
    This will give us a numpy array of just the values, which are the correlation numbers
    '''
    # building figure and axis:
    fig1 = plt.figure(figsize=(16, 8))
    ax1 = fig1.add_subplot(111)

    # building heatmap:
    heatmap1 = ax1.pcolor(data1, cmap=plt.cm.RdYlGn) #matplotlib colormap Red-Yellow-Green
    # add a colorbar, for that we see: green = +-corr., yellow no corr., red = -corr.
    fig1.colorbar(heatmap1)

    # setting x and y axis ticks, so that we see which companies are which
    ax1.set_xticks(np.arange(data1.shape[1]) + 0.5, minor=False)
    ax1.set_yticks(np.arange(data1.shape[0]) + 0.5, minor=False)

    '''
    This will flip our yaxis, so that the graph is a little easier to read, since there will be some space between 
    the x's and y's. Generally matplotlib leaves room on the extreme ends of your graph since this tends to make 
    graphs easier to read, but, in our case, it doesn't. Then we also flip the xaxis to be at the top of the graph, 
    rather than the traditional bottom, again to just make this more like a correlation table should be. 
    '''
    ax1.invert_yaxis()
    ax1.xaxis.tick_top()

    column_labels = df_corr.columns
    row_labels = df_corr.index
    ax1.set_xticklabels(column_labels)
    ax1.set_yticklabels(row_labels)

    '''
    The line that says heatmap1.set_clim(-1,1) just tells the colormap that our range 
    is going to be from -1 to positive 1.
    '''
    plt.xticks(rotation=90)
    heatmap1.set_clim(-1, 1)
    plt.tight_layout()
    plt.savefig("correlations.png", dpi=300)
    plt.show()


# immer auskommentieren, wenn ich in einer höher nummerierten Datei diese Funktion verwende
# (ansonsten wird die Funktion doppelt aufgerufen)
# visualize_data()